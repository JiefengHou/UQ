0a)@G:\prjScript.sql.txt;1a)SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'EMP' 	OR TABLE_NAME = 'DEPT' OR TABLE_NAME = 'PURCHASE' OR TABLE_NAME = 'CLIENT';1b)ALTER TABLE DEPT ADD CONSTRAINT UN_DNAME UNIQUE (DNAME);ALTER TABLE PURCHASE MODIFY AMOUNT NUMBER (4) NOT NULL;ALTER TABLE EMP MODIFY ENAME VARCHAR2 (20) NOT NULL;ALTER TABLE DEPT MODIFY DNAME VARCHAR2 (20) NOT NULL;ALTER TABLE CLIENT MODIFY CNAME VARCHAR2 (20) NOT NULL;ALTER TABLE PURCHASE MODIFY RECEIPTNO NUMBER (6) NOT NULL;ALTER TABLE PURCHASE ADD CONSTRAINT CK_SERVICETYPE 	CHECK (SERVICETYPE = 'Training' 		OR SERVICETYPE = 'Data Recovery' 		OR SERVICETYPE = 'Consultation' 		OR SERVICETYPE = 'Software Installation' 		OR SERVICETYPE = 'Software Repair');			ALTER TABLE PURCHASE ADD CONSTRAINT CK_PAYMENTTYPE 	CHECK (PAYMENTTYPE = 'Debit' 		OR PAYMENTTYPE = 'Cash' 		OR PAYMENTTYPE = 'Credit');			ALTER TABLE PURCHASE ADD CONSTRAINT CK_GST 	CHECK (GST = 'Yes' OR GST = 'No');	ALTER TABLE EMP ADD CONSTRAINT FK_DEPTNO 	FOREIGN KEY (DEPTNO) REFERENCES DEPT (DEPTNO);		ALTER TABLE PURCHASE ADD CONSTRAINT FK_EMPNO 	FOREIGN KEY (SERVEDBY) REFERENCES EMP (EMPNO);ALTER TABLE PURCHASE ADD CONSTRAINT FK_CLIENTNO 	FOREIGN KEY (CLIENTNO) REFERENCES CLIENT (CLIENTNO);				2a)SELECT *FROM (	SELECT PURCHASE.CLIENTNO AS CLIENT_NUM, 			CNAME AS CLIENT_NAME, SUM(AMOUNT) AS TOTAL_PURCHASE		FROM PURCHASE,CLIENT		WHERE PURCHASE.CLIENTNO = CLIENT.CLIENTNO		GROUP BY PURCHASE.CLIENTNO, CNAME		ORDER BY SUM(AMOUNT) DESC)WHERE ROWNUM=1;2b)CREATE OR REPLACE TRIGGER TOP_CLIENT_DISCOUNTBEFORE INSERT ON "PURCHASE"FOR EACH ROWDECLARETOP_CLIENT NUMBER(5);BEGIN	SELECT CLIENT_NUM INTO TOP_CLIENT FROM (SELECT *											FROM (	SELECT PURCHASE.CLIENTNO AS CLIENT_NUM, 															CNAME AS CLIENT_NAME, 															SUM(AMOUNT) AS TOTAL_PURCHASE													FROM PURCHASE,CLIENT													WHERE PURCHASE.CLIENTNO = CLIENT.CLIENTNO													GROUP BY PURCHASE.CLIENTNO, CNAME													ORDER BY SUM(AMOUNT) DESC)											WHERE ROWNUM=1);	IF :NEW.CLIENTNO = TOP_CLIENT THEN :NEW.AMOUNT := (:NEW.AMOUNT)*0.85;	END IF;END;/2c)CREATE OR REPLACE TRIGGER SUNSHINE_DISCOUNTBEFORE INSERT ON "PURCHASE"FOR EACH ROWDECLARECOUNT_NUM NUMBER(1);BEGIN	SELECT NVL(COUNT(*),0) INTO COUNT_NUM FROM (SELECT SERVEDBY												FROM PURCHASE, EMP, DEPT												WHERE PURCHASE.SERVEDBY = EMP.EMPNO 													AND EMP.DEPTNO = DEPT.DEPTNO 													AND DEPT.DNAME = 'SALES - Sunshine'												GROUP BY SERVEDBY) 	WHERE :NEW.SERVEDBY = SERVEDBY;	IF COUNT_NUM > 0 THEN			:NEW.PAYMENTTYPE := 'Cash';				IF :NEW.SERVICETYPE = 'Data Recovery' THEN :NEW.AMOUNT := (:NEW.AMOUNT)*0.7;			END IF;	END IF;END;/3a)CREATE VIEW V_DEPT_AMOUNT ASSELECT DEPT.DNAME AS DNAME, DEPT.DEPTNO AS DNUM, MAX(AMOUNT) AS MAX_AMOUNT, 		MIN(AMOUNT) MIN_AMOUNT, AVG(AMOUNT) AS AVG_AMOUNT, SUM(AMOUNT) AS TOTAL_AMOUNTFROM PURCHASE, EMP, DEPTWHERE PURCHASE.SERVEDBY = EMP.EMPNO AND EMP.DEPTNO = DEPT.DEPTNOGROUP BY DEPT.DNAME, DEPT.DEPTNO;3b)CREATE MATERIALIZED VIEW MV_DEPT_AMOUNTBUILD IMMEDIATE ASSELECT DEPT.DNAME AS DNAME, DEPT.DEPTNO AS DNUM, MAX(AMOUNT) AS MAX_AMOUNT, 		MIN(AMOUNT) MIN_AMOUNT, AVG(AMOUNT) AS AVG_AMOUNT, SUM(AMOUNT) AS TOTAL_AMOUNTFROM PURCHASE, EMP, DEPTWHERE PURCHASE.SERVEDBY = EMP.EMPNO AND EMP.DEPTNO = DEPT.DEPTNOGROUP BY DEPT.DNAME, DEPT.DEPTNO;3c)SET TIMING ON;SELECT * FROM V_DEPT_AMOUNT;SELECT * FROM MV_DEPT_AMOUNT;3d)CREATE VIEW V_DEPT_TOP_EMPS ASSELECT DEPT_NUM, DEPT_NAME, EMPLOYE_NUM, EMPLOYE_NAME, COUNT_AMOUNT, AVG_AMOUNT, MAX_AMOUNT, TOTAL_AMOUNTFROM (	SELECT DNAME AS DEPT_NAME, DEPT.DEPTNO AS DEPT_NUM, ENAME AS EMPLOYE_NAME, EMP.EMPNO AS EMPLOYE_NUM, COUNT(AMOUNT) AS COUNT_AMOUNT, AVG(AMOUNT) AS AVG_AMOUNT, MAX(AMOUNT) AS MAX_AMOUNT, SUM(AMOUNT) AS TOTAL_AMOUNT, ROW_NUMBER() OVER(PARTITION BY DNAME ORDER BY SUM(AMOUNT) DESC) RM		FROM EMP, PURCHASE, DEPT		WHERE EMP.EMPNO = PURCHASE.SERVEDBY AND DEPT.DEPTNO = EMP.DEPTNO		GROUP BY DNAME, DEPT.DEPTNO, ENAME, EMP.EMPNO		ORDER BY DEPT.DEPTNO,SUM(AMOUNT) DESC)WHERE RM <= 10;CREATE MATERIALIZED VIEW MV_DEPT_TOP_EMPSBUILD IMMEDIATE ASSELECT DEPT_NUM, DEPT_NAME, EMPLOYE_NUM, EMPLOYE_NAME, COUNT_AMOUNT, AVG_AMOUNT, MAX_AMOUNT, TOTAL_AMOUNTFROM (	SELECT DNAME AS DEPT_NAME, DEPT.DEPTNO AS DEPT_NUM, ENAME AS EMPLOYE_NAME, EMP.EMPNO AS EMPLOYE_NUM, COUNT(AMOUNT) AS COUNT_AMOUNT, AVG(AMOUNT) AS AVG_AMOUNT, MAX(AMOUNT) AS MAX_AMOUNT, SUM(AMOUNT) AS TOTAL_AMOUNT, ROW_NUMBER() OVER(PARTITION BY DNAME ORDER BY SUM(AMOUNT) DESC) RM		FROM EMP, PURCHASE, DEPT		WHERE EMP.EMPNO = PURCHASE.SERVEDBY AND DEPT.DEPTNO = EMP.DEPTNO		GROUP BY DNAME, DEPT.DEPTNO, ENAME, EMP.EMPNO		ORDER BY DEPT.DEPTNO,SUM(AMOUNT) DESC)WHERE RM <= 10;3e)SELECT * FROM V_DEPT_TOP_EMPS;SELECT * FROM MV_DEPT_TOP_EMPS;4a)SELECT COUNT(*)FROM (SELECT COUNT(SUBSTR(RECEIPTNO,0,3)) AS COUNT_NUMFROM PURCHASEGROUP BY SUBSTR(RECEIPTNO,0,3)HAVING COUNT(SUBSTR(RECEIPTNO,0,3)) >= 10ORDER BY COUNT(SUBSTR(RECEIPTNO,0,3)));4b)CREATE INDEX RECEIPT_BOOK ON PURCHASE(SUBSTR(RECEIPTNO,0,3));EXPLAIN PLAN FOR SELECT * FROM (SELECT COUNT(*)								FROM (SELECT COUNT(SUBSTR(RECEIPTNO,0,3)) AS COUNT_NUM								FROM PURCHASE								GROUP BY SUBSTR(RECEIPTNO,0,3)								HAVING COUNT(SUBSTR(RECEIPTNO,0,3)) >= 10								ORDER BY COUNT(SUBSTR(RECEIPTNO,0,3))));SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);4c)SELECT SUM(AMOUNT) FROM EMP, PURCHASEWHERE EMP.EMPNO = PURCHASE.SERVEDBY AND INSTR(SERVICETYPE, 'Software')=0 AND DEPTNO = '50';4d)CREATE INDEX SERVICE_AMOUNT ON PURCHASE(INSTR(SERVICETYPE, 'Software'));EXPLAIN PLAN FOR SELECT * FROM (SELECT SUM(AMOUNT) 								FROM EMP, PURCHASE								WHERE EMP.EMPNO = PURCHASE.SERVEDBY AND INSTR(SERVICETYPE, 'Software')=0 AND DEPTNO = '50');SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);5a)SELECT SERVICETYPE, PAYMENTTYPE, GST, COUNT(*)FROM PURCHASE GROUP BY SERVICETYPE, PAYMENTTYPE, GSTHAVING COUNT(*) >= 1000;6a)EXPLAIN PLAN FOR SELECT * FROM PURCHASE WHERE PURCHASENO = 9989;SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);6b)ALTER TABLE PURCHASE DROP CONSTRAINT PK_PURCHASENO;EXPLAIN PLAN FOR SELECT * FROM PURCHASE WHERE PURCHASENO = 9989;SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);